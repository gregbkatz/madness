#!/usr/bin/env python3
"""
Analyze Monte Carlo Simulations

This script analyzes the results of Monte Carlo simulations, calculating statistics
for all user brackets and generating reports and visualizations.
"""

import os
import argparse
import json
from datetime import datetime
import matplotlib.pyplot as plt

from simulation.simulation_analyzer import BracketAnalyzer, analyze_simulations

def parse_arguments():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(
        description='Analyze Monte Carlo simulations and calculate user bracket statistics'
    )
    parser.add_argument(
        '--simulation-file',
        type=str,
        required=True,
        help='Path to simulation file generated by generate_simulations.py'
    )
    parser.add_argument(
        '--output-dir',
        type=str,
        default='data/simulations',
        help='Directory to save analysis results (default: data/simulations)'
    )
    parser.add_argument(
        '--output-file',
        type=str,
        help='Specific filename for the analysis results (will be placed in output-dir)'
    )
    parser.add_argument(
        '--user-brackets-dir',
        type=str,
        default='saved_brackets',
        help='Directory containing user brackets (default: saved_brackets)'
    )
    parser.add_argument(
        '--visualize',
        action='store_true',
        help='Generate visualizations of the results'
    )
    
    return parser.parse_args()

def main():
    """Main function to run the simulation analysis."""
    args = parse_arguments()
    
    # Validate input file
    if not os.path.exists(args.simulation_file):
        print(f"Error: Simulation file not found: {args.simulation_file}")
        return 1
    
    # Create output directory if it doesn't exist
    os.makedirs(args.output_dir, exist_ok=True)
    
    print(f"Analyzing simulations from file: {args.simulation_file}")
    print(f"Loading user brackets from: {args.user_brackets_dir}")
    
    # Prepare output files
    if args.output_file:
        # Use the specified output filename
        analysis_file = os.path.join(args.output_dir, args.output_file)
    else:
        # Generate timestamp for output files
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        analysis_file = os.path.join(args.output_dir, f"analysis_{timestamp}.json")
    
    # Run the analysis
    try:
        # Create the analyzer
        analyzer = BracketAnalyzer()
        
        # Load simulations and user brackets
        analyzer.load_simulations(args.simulation_file)
        analyzer.load_user_brackets(args.user_brackets_dir)
        
        # Calculate scores and rankings
        print("Calculating scores...")
        analyzer.calculate_scores()
        
        print("Calculating rankings...")
        analyzer.calculate_rankings()
        
        print("Analyzing results...")
        results = analyzer.analyze_results()
        
        # Save the analysis results
        print(f"Saving analysis to: {analysis_file}")
        analyzer.save_analysis(analysis_file)
        
        # Print a summary
        print("\nAnalysis Results Summary:")
        print("-------------------------")
        print(f"Number of simulations: {len(analyzer.simulations)}")
        print(f"Number of users: {len(analyzer.usernames)}")
        
        # Sort users by name
        sorted_users = sorted(results.items(), key=lambda x: x[0].lower())
        
        # Print a full table of all users
        print("\nFull User Analysis Results (sorted by name):")
        # Define column widths
        username_width = 15
        numeric_width = 10
        rank_width = 6
        
        # Calculate total table width
        table_width = (username_width + 2) + (numeric_width + 2) * 4 + (rank_width + 2) * 2 + 1
        
        print("-" * table_width)
        print(f"| {'USERNAME':<{username_width}} | {'AVG RANK':<{numeric_width}} | {'WIN %':<{numeric_width}} | {'LAST %':<{numeric_width}} | {'BEST':<{rank_width}} | {'WORST':<{rank_width}} | {'MIN SCORE':<{numeric_width}} | {'MAX SCORE':<{numeric_width}} |")
        print(f"|{'-' * (username_width + 2)}|{'-' * (numeric_width + 2)}|{'-' * (numeric_width + 2)}|{'-' * (numeric_width + 2)}|{'-' * (rank_width + 2)}|{'-' * (rank_width + 2)}|{'-' * (numeric_width + 2)}|{'-' * (numeric_width + 2)}|")
        
        for username, stats in sorted_users:
            # Format avg_rank to 1 decimal place
            avg_rank_str = f"{stats['avg_rank']:.1f}"
            
            # Format percentages - show as integers unless between 0 and 1
            def format_percentage(pct):
                if 0 < pct < 1:
                    return "<1"
                else:
                    return f"{int(pct)}"
                    
            win_pct_str = format_percentage(stats['pct_first_place'])
            last_pct_str = format_percentage(stats['pct_last_place'])
            
            print(f"| {username:<{username_width}} | {avg_rank_str:<{numeric_width}} | {win_pct_str:<{numeric_width}} | {last_pct_str:<{numeric_width}} | {stats['min_rank']:<{rank_width}} | {stats['max_rank']:<{rank_width}} | {stats['min_score']:<{numeric_width}} | {stats['max_score']:<{numeric_width}} |")
        
        print("-" * table_width)
        
        # Create visualizations if requested
        if args.visualize:
            print("\nGenerating visualizations...")
            
            # Create directory for visualizations
            viz_dir = os.path.join(args.output_dir, "visualizations")
            os.makedirs(viz_dir, exist_ok=True)
            
            # Generate rank distribution charts
            rank_dist_file = os.path.join(viz_dir, f"rank_distribution_{timestamp}.png")
            analyzer.visualize_rank_distribution(output_file=rank_dist_file)
            print(f"Rank distribution visualization saved to: {rank_dist_file}")
            
            # Generate individual user charts for top users
            for username in list(results.keys())[:5]:
                user_file = os.path.join(viz_dir, f"user_{username}_{timestamp}.png")
                analyzer.visualize_rank_distribution(username=username, output_file=user_file)
                print(f"Visualization for {username} saved to: {user_file}")
        
        print("\nAnalysis completed successfully!")
        return 0
        
    except Exception as e:
        print(f"Error analyzing simulations: {str(e)}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit(main()) 